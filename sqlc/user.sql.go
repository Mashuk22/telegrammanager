// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
        chat_id,
        username,
        first_name,
        last_name,
        role_id,
        is_subscribed
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, chat_id, username, first_name, last_name, role_id, is_subscribed, created_at, updated_at
`

type CreateUserParams struct {
	ChatID       int64       `json:"chat_id"`
	Username     pgtype.Text `json:"username"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       int32       `json:"role_id"`
	IsSubscribed pgtype.Bool `json:"is_subscribed"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createUser,
		arg.ChatID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
		arg.IsSubscribed,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, chat_id, username, first_name, last_name, role_id, is_subscribed, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.RoleID,
		&i.IsSubscribed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, chat_id, username, first_name, last_name, role_id, is_subscribed, created_at, updated_at
FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.RoleID,
			&i.IsSubscribed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set chat_id = $2,
    username = $3,
    first_name = $4,
    last_name = $5,
    role_id = $6,
    is_subscribed = $7
WHERE id = $1
`

type UpdateUserParams struct {
	ID           int32       `json:"id"`
	ChatID       int64       `json:"chat_id"`
	Username     pgtype.Text `json:"username"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       int32       `json:"role_id"`
	IsSubscribed pgtype.Bool `json:"is_subscribed"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.ChatID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
		arg.IsSubscribed,
	)
	return err
}
